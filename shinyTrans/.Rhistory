p_trad <- final_trad / K
p_trans <- final_trans / K
sampN <- sampN
var_trad <- (sampN * p_trad * (1 - p_trad) * (K - sampN)) / (K - 1)
var_trans <- (sampN * p_trans * (1 - p_trans) * (K - sampN)) / (K - 1)
diff <- (sampN / K) * (final_trad - final_trans)
# From Lee's code
t.test.calcs <- function(sd1, sd2, alpha=0.05, N=NULL, delta=NULL, pow=NULL) {
if (is.null(N)+is.null(delta)+is.null(pow)+is.null(alpha) != 1) {
print("Error: Need exactly one of N, delta, power, or alpha to be null")
return(NA)
} else if (is.null(N)) {
approx <- ((sd1^2+sd2^2)*(qnorm(1-alpha/2)+qnorm(pow))^2)/(delta^2)
if (approx < 1) {
return(1)
} else {
return(uniroot(f=function(x) ((sd1^2+sd2^2)*(qt(p=1-alpha/2, df=2*x-2)+qt(p=pow, df=2*x-2))^2)/(delta^2)-x,
lower=approx, upper=approx*5)$root)
}
} else if(is.null(pow)) {
return(pow <- pt(q=sqrt((N*delta^2)/(sd1^2+sd2^2))-qt(p=1-alpha/2, df=2*N-2), df=2*N-2))
} else if(is.null(delta)) {
return(sqrt(((sd1^2+sd2^2)*(qt(p=1-alpha/2, df=2*N-2)+qt(p=pow, df=2*N-2))^2)/N))
} else {
return(2*(1-pt(q=sqrt((N*delta^2)/(sd1^2+sd2^2))-qt(p=pow, df=2*N-2), df=2*N-2)))
}
}
req_samp <- t.test.calcs(sd1=sqrt(var_trad), sd2=sqrt(var_trans), alpha=0.05, N=NULL, delta=diff, pow=0.8)
req_samp
var_trad
var_trans
diff
r0w
r0v
runApp('Desktop/shinyTrans')
# 0) Set up global variables
s_init = 1 - w0 - q
# 1) Get final size of traditional vaccine
trad_vax_res <- getFinalSize(q=q, i0=w0, r0=r0w, gamma=gamma, s=s)
# 2a) Get final size of "vaccine transmission." When s=0,
#     The recovered prop. is actually the prop. vaccinated.
trans_vax_pre <- getFinalSize(q=q, i0=(gamma*(s_init)), r0=r0v, gamma=0, s=s) # This last "s" does not matter
# 2b) Get final size after wildtype transmission
prop_pop_vax <- trans_vax_pre[3] - q # prop. of entire pop. vaccinated.
trans_gam <- prop_pop_vax / s_init # convert to gamma, which is the prop. of 1-w0-q vaccinated.
trans_vax_res <- getFinalSize(q=q, i0=w0, r0=r0w, gamma=trans_gam, s=s)
# 3) Get delta (the estimand)
delta <- trad_vax_res[3] - trans_vax_res[3]
delta
c('Final size trad: ', round(trad_vax_res[3], 2),
'; Final size trans: ', round(trans_vax_res[3], 2),
'; Delta: ', round(delta, 2))
# Get final sizes
res <- getDiffFinalSize(q, w0, r0t, r0w, gamma, r0v, s)
# Define variables
N <- 4
C <- N / 2
K <- n -round(n * gamma * (1 - w0 - q)) #-round(w0*n) -round(q*n) Assume we don't know which were recovered or infected initially, only which were vaxxed initially
final_trad <- as.numeric(res[2]) * n
final_trans <- as.numeric(res[4]) * n
# Function to get variance
getSum1 <- function(final) {
sum1 <- 0
for (i in 1:K) {
sum2 <- 0
for (j in 1:K) {
if (j <= final) {
sum2 <- sum2 + (1 - (final / K))^2 / (C - 1)
} else {
sum2 <- sum2 + (0 - (final / K))^2 / (C - 1)
}
}
res <- (1 - (K / n)) * (sum2 / K)
sum1 <- sum1 + res
}
return(sum1)
}
var_trad <- (1 / (C * N)) * getSum1(final_trad)
var_trans <- (1 / (C * N)) * getSum1(final_trans)
# Get final sizes
res <- getDiffFinalSize(q, w0, r0t, r0w, gamma, r0v, s)
# Set up initial variables
K <- n -round(n * gamma * (1 - w0 - q)) #-round(w0*n) -round(q*n) Assume we don't know which were recovered or infected initially, only which were vaxxed initially
final_trad <- as.numeric(res[2]) * n
final_trans <- as.numeric(res[4]) * n
# Assume can only sample 'sampN' and if we pick
# up a vaccinated, this is not considered. Then it becomes a hypergeometric R.V.
p_trad <- final_trad / K
p_trans <- final_trans / K
sampN <- sampN
var_trad <- (sampN * p_trad * (1 - p_trad) * (K - sampN)) / (K - 1)
var_trans <- (sampN * p_trans * (1 - p_trans) * (K - sampN)) / (K - 1)
diff <- (sampN / K) * (final_trad - final_trans)
# From Lee's code
t.test.calcs <- function(sd1, sd2, alpha=0.05, N=NULL, delta=NULL, pow=NULL) {
if (is.null(N)+is.null(delta)+is.null(pow)+is.null(alpha) != 1) {
print("Error: Need exactly one of N, delta, power, or alpha to be null")
return(NA)
} else if (is.null(N)) {
approx <- ((sd1^2+sd2^2)*(qnorm(1-alpha/2)+qnorm(pow))^2)/(delta^2)
if (approx < 1) {
return(1)
} else {
return(uniroot(f=function(x) ((sd1^2+sd2^2)*(qt(p=1-alpha/2, df=2*x-2)+qt(p=pow, df=2*x-2))^2)/(delta^2)-x,
lower=approx, upper=approx*5)$root)
}
} else if(is.null(pow)) {
return(pow <- pt(q=sqrt((N*delta^2)/(sd1^2+sd2^2))-qt(p=1-alpha/2, df=2*N-2), df=2*N-2))
} else if(is.null(delta)) {
return(sqrt(((sd1^2+sd2^2)*(qt(p=1-alpha/2, df=2*N-2)+qt(p=pow, df=2*N-2))^2)/N))
} else {
return(2*(1-pt(q=sqrt((N*delta^2)/(sd1^2+sd2^2))-qt(p=pow, df=2*N-2), df=2*N-2)))
}
}
req_samp <- t.test.calcs(sd1=sqrt(var_trad), sd2=sqrt(var_trans), alpha=0.05, N=NULL, delta=diff, pow=0.8)
runApp('Desktop/shinyTrans')
runApp('Desktop/shinyTrans')
runApp('Desktop/shinyTrans')
6*50
runApp('Desktop/shinyTrans')
runApp('Desktop/shinyTrans')
runApp('Desktop/shinyTrans')
0.01*1000
runApp('Desktop/shinyTrans')
trans_vax_res
(gamma*(s_init))
gamma
runApp('Desktop/shinyTrans')
prop_pop_vax
trans_gam
gamma
trans_vax_res
prop_pop_vax
prop_pop_vax - trans_vax_res[2]
s
# 4) Get theta3 and theta4
final_size_of_infect_among_indirect_vax <- prop_pop_vax - trans_vax_res[2]
(final_size_of_infect_among_indirect_vax / prop_pop_vax)
trad_vax_res[3]
(final_size_of_infect_among_indirect_vax / prop_pop_vax)
runApp('Desktop/shinyTrans')
s_init
runApp('Desktop/shinyTrans')
runApp('Desktop/shinyTrans')
(s_init * (1-gamma))
s_init
# 4) Get theta3 and theta4
final_size_of_infect_among_indirect_vax <- ((prop_pop_vax - gamma*s_init) / prop_pop_vax) * (prop_pop_vax - trans_vax_res[2]) # Assumes all infections occurred proportionally to amount vaccinated initially : vaccinated indirectly ratio
final_size_of_infect_among_indirect_vax
(prop_pop_vax - trans_vax_res[2])
((prop_pop_vax - gamma*s_init) / prop_pop_vax)
gamma*s_init
prop_pop_vax
(trad_vax_res[3] / (s_init * (1-gamma))) - (final_size_of_infect_among_indirect_vax / prop_pop_vax)
(trad_vax_res[3] / (s_init * (1-gamma)))
trans_vax_res
gamma*(1-gamma)
trans_gam
s_init*(1- trans_gam)
trans_vax_res
r0v
r0w
(s_init * (1-trans_gam))
trans_vax_res
(s_init * (1-trans_gam)) - trans_vax_res[1]
(trad_vax_res[3] / (s_init * (1-gamma))) - (final_size_among_naive_suscep / (s_init * (1-trans_gam)))
final_size_among_naive_suscep <- (s_init * (1-trans_gam)) - trans_vax_res[1]
delta_theta4 <- (trad_vax_res[3] / (s_init * (1-gamma))) - (final_size_among_naive_suscep / (s_init * (1-trans_gam)))
delta_theta4
(trad_vax_res[3] / (s_init * (1-gamma)))
# 3) Get theta1
delta <- (trad_vax_res[3] / (s_init * (1-gamma))) - (trans_vax_res[3] / (s_init * (1-gamma))) # Division occurs since this is the initially unvaccinated non-recovered, non-wildtype infection group
delta
# Get final sizes
res <- getDiffFinalSize(q, w0, r0t, r0w, gamma, r0v, s)
res
as.numeric(res[2])
as.numeric(res[4])
(final_size_among_naive_suscep / (s_init * (1-trans_gam)))
runApp('Desktop/shinyTrans')
(s_init * (1-trans_gam))
(s_init * (1-gamma))
final_size_among_naive_suscep
trans_vax_res[3]
trad_vax_res[3]
trad_vax_res[3] - trans_vax_res[3]
(trad_vax_res[3] - 0.1) - (trans_vax_res[3] - 0.1)
(final_size_among_naive_suscep / (s_init * (1-trans_gam))
)
runApp('Desktop/shinyTrans')
(s_init * (1-gamma))
runApp('Desktop/shinyTrans')
runApp('Desktop/shinyTrans')
trans_vax_res
as.numeric(res[14])
# Get final sizes
res <- getDiffFinalSize(q, w0, r0t, r0w, gamma, r0v, s)
# Set up initial variables
K <- n #-round(n * gamma * (1 - w0 - q)) #-round(w0*n) -round(q*n) Assume we don't know which were recovered or infected initially, only which were vaxxed initially
final_trad <- as.numeric(res[2]) * n
final_trans <- as.numeric(res[4]) * n
# Assume can only sample 'sampN' and if we pick
# up a currently vaccinated, this is not considered. Then it becomes a hypergeometric R.V.
p_trad <- final_trad / K
p_trans <- final_trans / K
sampN <- sampN
var_trad <- (sampN * p_trad * (1 - p_trad) * (K - sampN)) / (K - 1)
var_trans <- (sampN * p_trans * (1 - p_trans) * (K - sampN)) / (K - 1)
diff <- (sampN / K) * (final_trad - final_trans)
# From Lee's code
t.test.calcs <- function(sd1, sd2, alpha=0.05, N=NULL, delta=NULL, pow=NULL) {
if (is.null(N)+is.null(delta)+is.null(pow)+is.null(alpha) != 1) {
print("Error: Need exactly one of N, delta, power, or alpha to be null")
return(NA)
} else if (is.null(N)) {
approx <- ((sd1^2+sd2^2)*(qnorm(1-alpha/2)+qnorm(pow))^2)/(delta^2)
if (approx < 1) {
return(1)
} else {
return(uniroot(f=function(x) ((sd1^2+sd2^2)*(qt(p=1-alpha/2, df=2*x-2)+qt(p=pow, df=2*x-2))^2)/(delta^2)-x,
lower=approx, upper=approx*5)$root)
}
} else if(is.null(pow)) {
return(pow <- pt(q=sqrt((N*delta^2)/(sd1^2+sd2^2))-qt(p=1-alpha/2, df=2*N-2), df=2*N-2))
} else if(is.null(delta)) {
return(sqrt(((sd1^2+sd2^2)*(qt(p=1-alpha/2, df=2*N-2)+qt(p=pow, df=2*N-2))^2)/N))
} else {
return(2*(1-pt(q=sqrt((N*delta^2)/(sd1^2+sd2^2))-qt(p=pow, df=2*N-2), df=2*N-2)))
}
}
req_samp <- t.test.calcs(sd1=sqrt(var_trad), sd2=sqrt(var_trans), alpha=0.05, N=NULL, delta=diff, pow=0.8)
as.numeric(res[12])
res
# Function to get difference in final sizes
getDiffFinalSize <- function(q, w0, r0t, r0w, gamma, r0v, s) {
if(q + gamma + w0 > 1) {
return('q + gamma + w0 cannot be greater than 1.')
} else if (gamma > 0.75) {
return('Odd behavior when gamma greater than 0.75 (tested when gamma = 0.8). But this is unrealistic in the first place.')
} else {
# 0) Set up global variables
s_init = 1 - w0 - q
# 1) Get final size of traditional vaccine
trad_vax_res <- getFinalSize(q=q, i0=w0, r0=r0w, gamma=gamma, s=s)
# 2a) Get final size of "vaccine transmission." When s=0,
#     The recovered prop. is actually the prop. vaccinated.
trans_vax_pre <- getFinalSize(q=q, i0=(gamma*(s_init)), r0=r0v, gamma=0, s=s) # This last "s" does not matter
# 2b) Get final size after wildtype transmission
prop_pop_vax <- trans_vax_pre[3] - q # prop. of entire pop. vaccinated.
trans_gam <- prop_pop_vax / s_init # convert to gamma, which is the prop. of 1-w0-q vaccinated.
trans_vax_res <- getFinalSize(q=q, i0=w0, r0=r0w, gamma=trans_gam, s=s)
# 3) Get theta1
delta <- (trad_vax_res[3] / (s_init * (1-gamma))) - (trans_vax_res[3] / (s_init * (1-gamma))) # Division occurs since this is the initially unvaccinated non-recovered, non-wildtype infection group
# 4) Get theta3 and theta4
final_size_among_indirect_vax <- ((prop_pop_vax - gamma*s_init) / prop_pop_vax) * (prop_pop_vax - trans_vax_res[2]) # Assumes all infections occurred proportionally to amount vaccinated initially : vaccinated indirectly ratio
delta_theta3 <- (trad_vax_res[3] / (s_init * (1-gamma))) - (final_size_among_indirect_vax / (prop_pop_vax - gamma*s_init)) # This is NOT the final size among the initially vaccinated
final_size_among_naive_suscep <- (s_init * (1-trans_gam)) - trans_vax_res[1]
delta_theta4 <- (trad_vax_res[3] / (s_init * (1-gamma))) - (final_size_among_naive_suscep / (s_init * (1-trans_gam)))
return(c('Final size trad: ', round(trad_vax_res[3], 2),
'; Final size trans: ', round(trans_vax_res[3], 2),
'; Delta: ', round(delta, 2),
'; theta3: ', round(delta_theta3, 2),
'; theta4: ', round(delta_theta4, 2),
'; Prop. originally indirectly vaxxed before outbreak: ', round((prop_pop_vax - gamma*s_init), 2),
'; Prop. final size among the indirectly vaxxed before outbreak: ', round(final_size_among_indirect_vax, 2),
'; Prop. originally naive suscep. before outbreak: ', round((s_init * (1-trans_gam)), 2),
'; Prop. final size among naive suscep. before outbreak: ', round(final_size_among_naive_suscep, 2)))
}
}
# Get final sizes
res <- getDiffFinalSize(q, w0, r0t, r0w, gamma, r0v, s)
# Set up initial variables
K <- n #-round(n * gamma * (1 - w0 - q)) #-round(w0*n) -round(q*n) Assume we don't know which were recovered or infected initially, only which were vaxxed initially
final_trad <- as.numeric(res[2]) * n
final_trans <- as.numeric(res[4]) * n
# Assume can only sample 'sampN' and if we pick
# up a currently vaccinated, this is not considered. Then it becomes a hypergeometric R.V.
p_trad <- final_trad / K
p_trans <- final_trans / K
sampN <- sampN
var_trad <- (sampN * p_trad * (1 - p_trad) * (K - sampN)) / (K - 1)
var_trans <- (sampN * p_trans * (1 - p_trans) * (K - sampN)) / (K - 1)
diff <- (sampN / K) * (final_trad - final_trans)
# From Lee's code
t.test.calcs <- function(sd1, sd2, alpha=0.05, N=NULL, delta=NULL, pow=NULL) {
if (is.null(N)+is.null(delta)+is.null(pow)+is.null(alpha) != 1) {
print("Error: Need exactly one of N, delta, power, or alpha to be null")
return(NA)
} else if (is.null(N)) {
approx <- ((sd1^2+sd2^2)*(qnorm(1-alpha/2)+qnorm(pow))^2)/(delta^2)
if (approx < 1) {
return(1)
} else {
return(uniroot(f=function(x) ((sd1^2+sd2^2)*(qt(p=1-alpha/2, df=2*x-2)+qt(p=pow, df=2*x-2))^2)/(delta^2)-x,
lower=approx, upper=approx*5)$root)
}
} else if(is.null(pow)) {
return(pow <- pt(q=sqrt((N*delta^2)/(sd1^2+sd2^2))-qt(p=1-alpha/2, df=2*N-2), df=2*N-2))
} else if(is.null(delta)) {
return(sqrt(((sd1^2+sd2^2)*(qt(p=1-alpha/2, df=2*N-2)+qt(p=pow, df=2*N-2))^2)/N))
} else {
return(2*(1-pt(q=sqrt((N*delta^2)/(sd1^2+sd2^2))-qt(p=pow, df=2*N-2), df=2*N-2)))
}
}
req_samp <- t.test.calcs(sd1=sqrt(var_trad), sd2=sqrt(var_trans), alpha=0.05, N=NULL, delta=diff, pow=0.8)
# Now assume that from the recovereds, we can tell:
# 1) if vaccinated indirectly and then got infected
as.numeric(res[12])
as.numeric(res[14])
trans_vax_res
gamma
# 0) Set up global variables
s_init = 1 - w0 - q
# 1) Get final size of traditional vaccine
trad_vax_res <- getFinalSize(q=q, i0=w0, r0=r0w, gamma=gamma, s=s)
# 2a) Get final size of "vaccine transmission." When s=0,
#     The recovered prop. is actually the prop. vaccinated.
trans_vax_pre <- getFinalSize(q=q, i0=(gamma*(s_init)), r0=r0v, gamma=0, s=s) # This last "s" does not matter
# 2b) Get final size after wildtype transmission
prop_pop_vax <- trans_vax_pre[3] - q # prop. of entire pop. vaccinated.
trans_gam <- prop_pop_vax / s_init # convert to gamma, which is the prop. of 1-w0-q vaccinated.
trans_vax_res <- getFinalSize(q=q, i0=w0, r0=r0w, gamma=trans_gam, s=s)
# 3) Get theta1
delta <- (trad_vax_res[3] / (s_init * (1-gamma))) - (trans_vax_res[3] / (s_init * (1-gamma))) # Division occurs since this is the initially unvaccinated non-recovered, non-wildtype infection group
# 4) Get theta3 and theta4
final_size_among_indirect_vax <- ((prop_pop_vax - gamma*s_init) / prop_pop_vax) * (prop_pop_vax - trans_vax_res[2]) # Assumes all infections occurred proportionally to amount vaccinated initially : vaccinated indirectly ratio
delta_theta3 <- (trad_vax_res[3] / (s_init * (1-gamma))) - (final_size_among_indirect_vax / (prop_pop_vax - gamma*s_init)) # This is NOT the final size among the initially vaccinated
final_size_among_naive_suscep <- (s_init * (1-trans_gam)) - trans_vax_res[1]
delta_theta4 <- (trad_vax_res[3] / (s_init * (1-gamma))) - (final_size_among_naive_suscep / (s_init * (1-trans_gam)))
round(delta_theta3, 2)
round((prop_pop_vax - gamma*s_init), 2)
round(final_size_among_indirect_vax, 2)
(final_size_among_indirect_vax / (prop_pop_vax - gamma*s_init))
final_size_among_indirect_vax
# Function to get difference in final sizes
getDiffFinalSize <- function(q, w0, r0t, r0w, gamma, r0v, s) {
if(q + gamma + w0 > 1) {
return('q + gamma + w0 cannot be greater than 1.')
} else if (gamma > 0.75) {
return('Odd behavior when gamma greater than 0.75 (tested when gamma = 0.8). But this is unrealistic in the first place.')
} else {
# 0) Set up global variables
s_init = 1 - w0 - q
# 1) Get final size of traditional vaccine
trad_vax_res <- getFinalSize(q=q, i0=w0, r0=r0w, gamma=gamma, s=s)
# 2a) Get final size of "vaccine transmission." When s=0,
#     The recovered prop. is actually the prop. vaccinated.
trans_vax_pre <- getFinalSize(q=q, i0=(gamma*(s_init)), r0=r0v, gamma=0, s=s) # This last "s" does not matter
# 2b) Get final size after wildtype transmission
prop_pop_vax <- trans_vax_pre[3] - q # prop. of entire pop. vaccinated.
trans_gam <- prop_pop_vax / s_init # convert to gamma, which is the prop. of 1-w0-q vaccinated.
trans_vax_res <- getFinalSize(q=q, i0=w0, r0=r0w, gamma=trans_gam, s=s)
# 3) Get theta1
delta <- (trad_vax_res[3] / (s_init * (1-gamma))) - (trans_vax_res[3] / (s_init * (1-gamma))) # Division occurs since this is the initially unvaccinated non-recovered, non-wildtype infection group
# 4) Get theta3 and theta4
final_size_among_indirect_vax <- ((prop_pop_vax - gamma*s_init) / prop_pop_vax) * (prop_pop_vax - trans_vax_res[2]) # Assumes all infections occurred proportionally to amount vaccinated initially : vaccinated indirectly ratio
delta_theta3 <- (trad_vax_res[3] / (s_init * (1-gamma))) - (final_size_among_indirect_vax / (prop_pop_vax - gamma*s_init)) # This is NOT the final size among the initially vaccinated
final_size_among_naive_suscep <- (s_init * (1-trans_gam)) - trans_vax_res[1]
delta_theta4 <- (trad_vax_res[3] / (s_init * (1-gamma))) - (final_size_among_naive_suscep / (s_init * (1-trans_gam)))
return(c('Final size trad: ', round(trad_vax_res[3], 2),
'; Final size trans: ', round(trans_vax_res[3], 2),
'; Delta: ', round(delta, 2),
'; theta3: ', round(delta_theta3, 2),
'; theta4: ', round(delta_theta4, 2),
'; Prop. originally indirectly vaxxed before outbreak: ', round((prop_pop_vax - gamma*s_init), 5),
'; Prop. final size among the indirectly vaxxed before outbreak: ', round(final_size_among_indirect_vax, 5),
'; Prop. originally naive suscep. before outbreak: ', round((s_init * (1-trans_gam)), 5),
'; Prop. final size among naive suscep. before outbreak: ', round(final_size_among_naive_suscep, 5)))
}
}
# Get final sizes
res <- getDiffFinalSize(q, w0, r0t, r0w, gamma, r0v, s)
# Set up initial variables
K <- n #-round(n * gamma * (1 - w0 - q)) #-round(w0*n) -round(q*n) Assume we don't know which were recovered or infected initially, only which were vaxxed initially
final_trad <- as.numeric(res[2]) * n
final_trans <- as.numeric(res[4]) * n
# Assume can only sample 'sampN' and if we pick
# up a currently vaccinated, this is not considered. Then it becomes a hypergeometric R.V.
p_trad <- final_trad / K
p_trans <- final_trans / K
sampN <- sampN
var_trad <- (sampN * p_trad * (1 - p_trad) * (K - sampN)) / (K - 1)
var_trans <- (sampN * p_trans * (1 - p_trans) * (K - sampN)) / (K - 1)
diff <- (sampN / K) * (final_trad - final_trans)
# From Lee's code
t.test.calcs <- function(sd1, sd2, alpha=0.05, N=NULL, delta=NULL, pow=NULL) {
if (is.null(N)+is.null(delta)+is.null(pow)+is.null(alpha) != 1) {
print("Error: Need exactly one of N, delta, power, or alpha to be null")
return(NA)
} else if (is.null(N)) {
approx <- ((sd1^2+sd2^2)*(qnorm(1-alpha/2)+qnorm(pow))^2)/(delta^2)
if (approx < 1) {
return(1)
} else {
return(uniroot(f=function(x) ((sd1^2+sd2^2)*(qt(p=1-alpha/2, df=2*x-2)+qt(p=pow, df=2*x-2))^2)/(delta^2)-x,
lower=approx, upper=approx*5)$root)
}
} else if(is.null(pow)) {
return(pow <- pt(q=sqrt((N*delta^2)/(sd1^2+sd2^2))-qt(p=1-alpha/2, df=2*N-2), df=2*N-2))
} else if(is.null(delta)) {
return(sqrt(((sd1^2+sd2^2)*(qt(p=1-alpha/2, df=2*N-2)+qt(p=pow, df=2*N-2))^2)/N))
} else {
return(2*(1-pt(q=sqrt((N*delta^2)/(sd1^2+sd2^2))-qt(p=pow, df=2*N-2), df=2*N-2)))
}
}
req_samp <- t.test.calcs(sd1=sqrt(var_trad), sd2=sqrt(var_trans), alpha=0.05, N=NULL, delta=diff, pow=0.8)
# Now assume that from the recovereds, we can tell:
# 1) if vaccinated indirectly and then got infected
as.numeric(res[12])
as.numeric(res[14])
# 2) naive suscep. and then got infected
as.numeric(res[16])
as.numeric(res[18])
trans_vax_res
as.numeric(res[18]) +  as.numeric(res[16])
(final_size_among_naive_suscep / (s_init * (1-trans_gam)))
round((s_init * (1-trans_gam)), 5)
round(final_size_among_naive_suscep, 5))
round(final_size_among_naive_suscep, 5)))
round(final_size_among_naive_suscep, 5)
res[16] - res[18]
as.numeric(res[16]) - as.numeric(res[18])
trans_vax_res
# Now assume that from the recovereds, we can tell:
# 1) if vaccinated indirectly and then got infected
as.numeric(res[12])
as.numeric(res[14])
# 2) naive suscep. and then got infected
as.numeric(res[16])
as.numeric(res[18])
trans_vax_res
as.numeric(res[16]) - as.numeric(res[18])
as.numeric(res[12])
as.numeric(res[14])
# Now assume that from the recovereds, we can tell:
# 1) if vaccinated indirectly and then got infected
prop_denom <- as.numeric(res[12])
prop_infect <- as.numeric(res[14])
## Set up initial variables
final_trad <- as.numeric(res[2]) * n
final_trans <- round(as.numeric(res[4]) * prop_infect)
final_trans_denom <- round(as.numeric(res[4]) * prop_denom)
## Assume can only sample 'sampN.' Then it becomes a hypergeometric R.V.
p_trad <- final_trad / n
p_trans <- final_trans / final_trans_denom
p_trans
final_trans
final_trans_denom
final_trans <- round(n * prop_infect)
final_trans_denom <- round(n * prop_denom)
## Assume can only sample 'sampN.' Then it becomes a hypergeometric R.V.
p_trad <- final_trad / n
p_trans <- final_trans / final_trans_denom
p_trans
prop_infect
prop_denom
final_trans <- n * prop_infect
final_trans_denom <- n * prop_denom
## Assume can only sample 'sampN.' Then it becomes a hypergeometric R.V.
p_trad <- final_trad / n
p_trans <- final_trans / final_trans_denom
p_trans
# Now assume that from the recovereds, we can tell:
# 1) if vaccinated indirectly and then got infected
prop_denom <- as.numeric(res[12])
prop_infect <- as.numeric(res[14])
## Set up initial variables
final_trad <- as.numeric(res[2]) * n
final_trans <- n * prop_infect
final_trans_denom <- n * prop_denom
## Assume can only sample 'sampN.' Then it becomes a hypergeometric R.V.
p_trad <- final_trad / n
p_trans <- final_trans / final_trans_denom
sampN <- sampN
var_trad <- (sampN * p_trad * (1 - p_trad) * (n - sampN)) / (n - 1)
var_trans <- (sampN * p_trans * (1 - p_trans) * (n - sampN)) / (n - 1)
diff <- (sampN / n) * (final_trad) - (sampN/final_trans_denom) * (final_trans)
diff
final_trad
(sampN/final_trans_denom) * (final_trans)
(sampN / n) * (final_trad)
diff
req_samp <- t.test.calcs(sd1=sqrt(var_trad), sd2=sqrt(var_trans), alpha=0.05, N=NULL, delta=diff, pow=0.8)
req_samp
runApp('Desktop/shinyTrans')
trans_vax_res[3] / (s_init * (1-gamma))
round(trad_vax_res[3] / (s_init * (1-gamma)), 2)
round(trans_vax_res[3] / (s_init * (1-gamma)), 2)
runApp('Desktop/shinyTrans')
runApp('Desktop/shinyTrans')
runApp('Desktop/shinyTrans')
res <- c(getDiffFinalSize(q=input$q, w0=(1 / input$n), r0t=0, r0w=input$r0w,
gamma=input$gamma, r0v=input$r0v, s=input$s)[1:10],
getSampSize(n=input$n, q=input$q, w0=(1 / input$n), r0t=0, r0w=input$r0w,
gamma=input$gamma, r0v=input$r0v, s=input$s, sampN=input$samp_num))
runApp('Desktop/shinyTrans')
runApp('Desktop/shinyTrans')
res = c('hello', 'there')
HTML(paste(res, sep = '<br/>'))
HTML(paste(c('hello', 'there'), sep = '<br/>'))
runApp('Desktop/shinyTrans')
paste(c('hello', 'there'), sep = '<br/>')
paste(c('hello', 'there'))
paste0(c('hello', 'there'))
?paste
runApp('Desktop/shinyTrans')
runApp('Desktop/shinyTrans')
fs_res <- getDiffFinalSize(q=input$q, w0=(1 / input$n), r0t=0, r0w=input$r0w,
gamma=input$gamma, r0v=input$r0v, s=input$s)
runApp('Desktop/shinyTrans')
runApp('Desktop/shinyTrans')
runApp('Desktop/shinyTrans')
